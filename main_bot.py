from config import TOKEN
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types

# FSM
storage=MemoryStorage()
class FSMdata(StatesGroup):
	name = State()
	description = State()


# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)


# –∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç
tasks_button = KeyboardButton('üìã –ó–∞–¥–∞—á–∏')
add_task = KeyboardButton('‚úè –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
markup_main = ReplyKeyboardMarkup(resize_keyboard=True)
markup_main.add(tasks_button).add(add_task)

@dp.message_handler(commands="start")
async def start_command(message : types.Message):
	await message.answer('–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:', reply_markup=markup_main)


# –∫–Ω–æ–ø–∫–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
@dp.message_handler(lambda message: message.text == "üìã –ó–∞–¥–∞—á–∏")
async def tasks_command(message : types.Message):
	await message.answer('–ó–∞–¥–∞—á–∏:')


# –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
@dp.message_handler(lambda message: message.text == "‚úè –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", state=None)
async def add_task_command(message: types.Message):
	await FSMdata.name.set()
	await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:')


@dp.message_handler(commands='cancel', state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
	current_state = await state.get_state()
	if current_state is None:
		return
	await state.finish()
	await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')

@dp.message_handler(state=FSMdata.name)
async def set_name(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['name'] = message.text
	await FSMdata.next()
	await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:')

@dp.message_handler(state=FSMdata.description)
async def set_description(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['description'] = message.text

	async with state.proxy() as data:
		await message.answer(str(data))
	await state.finish()


# –ø–æ–ª–ª–∏–Ω–≥
if __name__ == '__main__':
  executor.start_polling(dp,skip_updates=True)
